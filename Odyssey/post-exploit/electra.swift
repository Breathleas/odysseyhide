//
//  electra.swift
//  Odyssey
//
//  Created by CoolStar on 3/1/20.
//  Copyright Â© 2020 coolstar. All rights reserved.
//

import Foundation

enum JAILBREAK_RETURN_STATUS {
    case ERR_NOERR
    case ERR_VERSION
    case ERR_EXPLOIT
    case ERR_UNSUPPORED
    case ERR_TFP0
    case ERR_ALREADY_JAILBROKEN
    case ERR_ROOTFS_RESTORE
    case ERR_REMOUNT
    case ERR_SNAPSHOT
    case ERR_JAILBREAK
    case ERR_CONFLICT
}

protocol ElectraUI {
    func showAlert(_ title: String, _ message: String, sync: Bool, callback: (() -> Void)?, yesNo: Bool, noButtonText: String?)
}

class Electra {
    #if MAINAPP
    private let ui: ElectraUI
    #endif
    private let tfp0: mach_port_t
    #if MAINAPP
    private let any_proc: UInt64
    private let enable_tweaks: Bool
    private let restore_rootfs: Bool
    private let nonce: String
    #endif
    
    private let offsets = Offsets.shared
    private let consts = Consts.shared
    
    #if MAINAPP
    private var kernel_slide: UInt64 = 0
    #endif
    
    private var all_proc: UInt64 = 0
    
    private(set) var our_proc: UInt64 = 0
    private var launchd_proc: UInt64 = 0
    private var kernel_proc: UInt64 = 0
    
    private(set) var amfid_pid: UInt32 = 0
    private(set) var jailbreakd_pid: UInt32 = 0
    private(set) var amfidebilitate_pid: UInt32 = 0
    #if MAINAPP
    private(set) var cfprefsd_pid: UInt32 = 0
    #endif
    
    private var our_task_addr: UInt64 = 0
    #if MAINAPP
    private var our_label: UInt64 = 0
    
    private var root_vnode: UInt64 = 0
    
    public init(ui: ElectraUI, tfp0: mach_port_t, any_proc: UInt64, enable_tweaks: Bool, restore_rootfs: Bool, nonce: String) {
        self.ui = ui
        self.tfp0 = tfp0
        self.any_proc = any_proc
        self.enable_tweaks = enable_tweaks
        self.restore_rootfs = restore_rootfs
        self.nonce = nonce
    }
    #else
    public init(tfp0: mach_port_t, all_proc: UInt64) {
        self.tfp0 = tfp0
        self.all_proc = all_proc
    }
    #endif
    
    #if MAINAPP
    private func find_allproc() {
        var proc = any_proc
        while proc != 0 {
            if rk64(rk64(proc + 8)) != proc {
                print(String(format: "Allproc? 0x%llx", proc))
                all_proc = proc
                break
            }
            proc = rk64(proc + 8)
        }
    }
    
    public func findPort(port: mach_port_name_t) -> UInt64 {
        let ourTask = rk64(self.our_proc + offsets.proc.task)
        let itkSpace = rk64(ourTask + offsets.task.itk_space)
        let isTable = rk64(itkSpace + offsets.ipc_space.is_table)
        
        let portIndex = UInt32(port) >> 8
        let ipcEntrySz = UInt32(0x18)
        
        let portAddr = rk64(isTable + UInt64((portIndex * ipcEntrySz)))
        return portAddr
    }
    #endif
    
    public func populate_procs() {
        let our_pid = getpid()
        var proc = rk64(all_proc)
        while proc != 0 {
            let pid = rk32(proc + offsets.proc.pid)
            if pid == 0 {
                kernel_proc = proc
                #if MAINAPP || DEBUG
                print("found kernel proc")
                #endif
            } else if pid == our_pid {
                #if MAINAPP || DEBUG
                print("found our pid")
                #endif
                
                our_proc = proc
                our_task_addr = rk64(proc + offsets.proc.task)
                
                let our_flags = rk32(our_task_addr + offsets.task.flags)
                wk32(our_task_addr + offsets.task.flags, our_flags | consts.TF_PLATFORM)
                
                var our_csflags = rk32(our_proc + offsets.proc.csflags)
                our_csflags = our_csflags | consts.CS_PLATFORM_BINARY | consts.CS_INSTALLER | consts.CS_GET_TASK_ALLOW
                our_csflags &= ~(consts.CS_RESTRICT | consts.CS_HARD | consts.CS_KILL)
                wk32(our_proc + offsets.proc.csflags, our_csflags)
            } else if pid == 1 {
                #if MAINAPP || DEBUG
                print("found launchd")
                #endif
                
                launchd_proc = proc
            } else {
                let nameptr = proc + offsets.proc.name
                var name = [UInt8](repeating: 0, count: 32)
                kread(nameptr, &name, 32)
                //print("found proc name: ", String(cString: &name))

                let swiftName = String(cString: &name)
                if swiftName == "amfid" {
                    #if MAINAPP || DEBUG
                    print("found amfid")
                    #endif
                    amfid_pid = pid
                } else if swiftName == "cfprefsd" {
                    #if MAINAPP || DEBUG
                    print("found cfprefsd")
                    #endif
                    #if MAINAPP
                    cfprefsd_pid = pid
                    #endif
                } else if swiftName == "jailbreakd" || swiftName == "substrated" || swiftName == "substituted" {
                    #if MAINAPP || DEBUG
                    print("found jailbreakd (\(swiftName))")
                    #endif
                    jailbreakd_pid = pid
                } else if swiftName == "amfidebilitate" {
                    #if MAINAPP || DEBUG
                    print("found amfidebilitate (\(swiftName))")
                    #endif
                    amfidebilitate_pid = pid
                }
            }
            proc = rk64(proc)
        }
    }
    
    public func find_proc(pid: UInt32) -> UInt64 {
        var proc = rk64(all_proc)
        while proc != 0 {
            let proc_pid = rk32(proc + offsets.proc.pid)
            if proc_pid == pid {
                return proc
            }
            proc = rk64(proc)
        }
        return proc
    }
    
    #if MAINAPP
    private func getRoot() -> JAILBREAK_RETURN_STATUS {
        let kern_ucred = rk64(kernel_proc + offsets.proc.ucred)
        let self_ucred = rk64(our_proc + offsets.proc.ucred)
        
        let our_label = rk64(self_ucred + offsets.ucred.cr_label)
        wk64(self_ucred + offsets.ucred.cr_label, rk64(kern_ucred + offsets.ucred.cr_label))
        wk32(self_ucred + offsets.ucred.cr_svuid, UInt32(0))
        
        setuid(0)
        setuid(0)
        
        wk64(self_ucred + offsets.ucred.cr_label, our_label)
        
        guard getuid() == 0 else {
            return .ERR_JAILBREAK
        }
        return .ERR_NOERR
    }
    
    private func cleanupCreds() {
        setuid(501)
        print("Reset creds")
    }
    
    public func jailbreak() -> JAILBREAK_RETURN_STATUS {
        print("Starting Electra...")
        guard tfp0 != MACH_PORT_NULL else {
            return .ERR_TFP0
        }
        
        let mobile_realhost = mach_host_self()
        
        var err: JAILBREAK_RETURN_STATUS = .ERR_NOERR
        
        find_allproc()
        populate_procs()

        
        let slide = getKernSlide(our_proc: our_proc)
        print(String(format: "kernel slide is at 0x%016llx", slide))
        kernel_slide = slide
        
        print(String(format: "our proc is at 0x%016llx", our_proc))
        print(String(format: "kern proc is at 0x%016llx", kernel_proc))
        
        err = getRoot()
        if err != .ERR_NOERR {
            return err
        }
        defer { cleanupCreds() }
        
        print(String(format: "our uid is %d", getuid()))
        
        let nvram = NVRamUtil(electra: self)
        _ = nvram.setNonce(nonce: nonce) //Not fatal is nonce setting fails

        let remount = Remount(ui: ui, our_proc: our_proc, kernel_proc: kernel_proc)
        if !remount.remount(launchd_proc: launchd_proc) {
            return .ERR_REMOUNT
        }
        
        if restore_rootfs {
            if !remount.restore_rootfs() {
                return .ERR_ROOTFS_RESTORE
            }
            return .ERR_NOERR
        }
        
        
        
        _ = SetHSP4(electra: self, tfp0: tfp0, slide: slide, kernel_proc: kernel_proc, our_proc: our_proc, old_realhost: mobile_realhost)
        
        guard init_kernel(slide + UInt64(0xFFFFFFF007004000), nil) == 0 else {
            return .ERR_JAILBREAK
        }
        let genCountAddr = find_cs_blob_generation_count()
        term_kernel()
        
        //linkvarlib();
        

        
        
//        try? FileManager.default.removeItem(atPath: "/odyssey")
//
//        mkdir("/odyssey", 0755)
//        chown("/odyssey", 0, 0)
//
//        mkdir("/odyssey/cstmp/", 0700)
//        chown("/odyssey/cstmp/", 0, 0)
//
//        unlink("/odyssey/pspawn_payload.dylib")
//        unlink("/usr/lib/pspawn_payload-stg2.dylib")
        
        let newpath = "/private/var/containers/Bundle/odyssey"
        try? FileManager.default.removeItem(atPath: newpath)
        
        mkdir(newpath, 0755)
        chown(newpath, 0, 0)
        
        let path = Bundle.main.resourcePath! + "/basebinaries/"
        
        copyfile(path, newpath, copyfile_state_t(bitPattern: 0), copyfile_flags_t(COPYFILE_ALL|COPYFILE_RECURSIVE|COPYFILE_NOFOLLOW_SRC))
        
        let array = try? FileManager.default.contentsOfDirectory(atPath: newpath)
        
        for fileName in array! {
            let fullPath = "\(newpath)/\(fileName)"
            chown(fullPath, 0, 0);
            chmod(fullPath, 0755);
        }
        
        //for jailbreakd run required
        try? FileManager.default.copyItem(at: Bundle.main.url(forResource: "signcert", withExtension: "p12")!,to: URL(fileURLWithPath: newpath+"/signcert.p12"))
        
        //for jailbreakd run required
        mkdir("/tmp/tmp-cstmp/", 0700)
        chown("/tmp/tmp-cstmp/", 0, 0)
        

        
        let amfidtakeover = AmfidTakeover(electra: self)
        
        guard amfidtakeover.grabEntitlements(our_proc: our_proc) else {
            return .ERR_JAILBREAK
        }
        
        if amfidebilitate_pid==0
        {
            amfidtakeover.takeoverAmfid(amfid_pid: amfid_pid)
            
    //        guard extractZstd(source: "tar", dest: "/odyssey/tar") else {
    //            return .ERR_JAILBREAK
    //        }
    //        try? FileManager.default.copyItem(at: Bundle.main.url(forResource: "signcert", withExtension: "p12")!,
    //                                          to: URL(fileURLWithPath: "/odyssey/signcert.p12"))
    //        chown("/odyssey/tar", 0, 0)
    //        chmod("/odyssey/tar", 0755)
    //        guard untarBasebins() else {
    //            return .ERR_JAILBREAK
    //        }
    //        rename("/odyssey/pspawn_payload-stg2.dylib", "/usr/lib/pspawn_payload-stg2.dylib")
            
            guard amfidtakeover.spawnAmfiDebilitate(allProc: all_proc) else {
                return .ERR_JAILBREAK
            }
            print("waiting for amfidebilitate...")
            while !amfidtakeover.amfidebilitate_spawned {
                usleep(1000)
            }
            
             print("Waiting for amfi to really be debilitated...")
             while testUnsandboxedExec() != 0 {
                 usleep(1000)
             }
        }
        
        amfidtakeover.resetEntitlements(our_proc: our_proc)
               
        
        
        let payload = "libcore.system.ldr1.dylib"; //pspawn_payload-stg2.dylib"
        
        unlink("/usr/lib/"+payload)
        
        try? FileManager.default.copyItem(at: URL(fileURLWithPath: newpath+"/"+payload) ,to: URL(fileURLWithPath: "/usr/lib/"+payload))
        
        runUnsandboxed(cmd: newpath+"/chmod 755 /usr/lib/"+payload)
        
        
        let corepayload = "libodsp.dylib"; //pspawn_payload-stg2.dylib"
        
        unlink("/usr/lib/"+corepayload)
        
        if enable_tweaks {
            try? FileManager.default.copyItem(at: URL(fileURLWithPath: newpath+"/"+corepayload) ,to: URL(fileURLWithPath: "/usr/lib/"+corepayload))

            runUnsandboxed(cmd: newpath+"/chmod 755 /usr/lib/"+corepayload)
        }
        
        ui.showAlert(
            "Continue",
            "rootfs now writable, press okay to reset as readonly",
            sync: true,
            callback: nil,
            yesNo: false,
            noButtonText: nil
        )
        
        //reset rootfs readonly
        if !remount.remount2(launchd_proc: launchd_proc) {
            return .ERR_REMOUNT
        }
        
        if jailbreakd_pid != 0 {
            return .ERR_ALREADY_JAILBROKEN
        }
        
        
        
        unlink("/var/run/jailbreakd.pid")
        
        guard spawnJailbreakd(genCountAddr: genCountAddr) else {
            return .ERR_JAILBREAK
        }
        
        print("Waiting for jailbreakd...")
        while !FileManager.default.fileExists(atPath: "/var/run/jailbreakd.pid") {
            usleep(1000)
        }
        print("jailbreakd started")
        
        //delete again
        unlink("/var/run/jailbreakd.pid")
                
//        guard bootstrapDevice(ui: self.ui) else {
//            return .ERR_JAILBREAK
//        }
//
        if enable_tweaks {
            unlink("/tmp/.disable_tweak")
        } else {
            try? "".write(toFile: "/tmp/.disable_tweak",
                          atomically: false, encoding: .utf8)
        }
        
        var springboardPlist: [String: Any] = [:]
        let plistURL = URL(fileURLWithPath: "/var/mobile/Library/Preferences/com.apple.springboard.plist")
        if let plistData = try? Data(contentsOf: plistURL) {
            if let springboardPlistRaw = try? PropertyListSerialization.propertyList(from: plistData, options: .mutableContainersAndLeaves, format: nil) as? [String: Any] {
                springboardPlist = springboardPlistRaw
            }
        }
        springboardPlist["SBShowNonDefaultSystemApps"] = true
        if let data = try? PropertyListSerialization.data(fromPropertyList: springboardPlist, format: .binary, options: 0) {
            try? data.write(to: plistURL)
        }
        
        try? FileManager.default.setAttributes([FileAttributeKey.posixPermissions: 0755,
                                           FileAttributeKey.ownerAccountName: "mobile"], ofItemAtPath: plistURL.path)
        
        kill(pid_t(cfprefsd_pid), SIGKILL)
        
//        _ = runUnsandboxed(cmd: "uicache -p /Applications/SafeMode.app")
//
//        startDaemons()
//
//        _ = runUnsandboxed(cmd: "/usr/bin/nohup /usr/bin/ldrestart >/dev/null 2>&1 &")

        //test
        print("spawn test...")
        var pid = pid_t(0)
        var status = posix_spawn(&pid, "/bin/ps", nil, nil, nil, environ)
        print("spawn status:\(status) pid=\(pid), err=", strerror(status))
        if status == 0 {
            if waitpid(pid, &status, 0) == -1 {
                perror("waitpid")
            }
        }
        
        return err
    }
    
    
    
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    
    private func spawnJailbreakd2(genCountAddr: UInt64) -> Bool {
        let allProcStr = String(format: "0x%llx", all_proc)
        let genCountAddrStr = String(format: "0x%llx", genCountAddr)
        
        setenv("allProc", allProcStr.cString(using: .utf8)!, 1)
        setenv("genCountAddr", genCountAddrStr.cString(using: .utf8)!, 1)
        
        var attrp: posix_spawnattr_t?
        posix_spawnattr_init(&attrp)
        posix_spawnattr_setflags(&attrp, Int16(POSIX_SPAWN_START_SUSPENDED))
        
        let bin="/private/var/containers/Bundle/odyssey/jailbreakd"
        //let bin="/odyssey/jailbreakd"
        
        var pid = pid_t(0)
        let status = posix_spawn(&pid, bin, nil, &attrp, nil, environ)

        print("[jailbreakd] spawn pid:", pid)
        
        guard status==0 else {
            return false
        }
        
        let _proc = find_proc(pid: UInt32(pid))
        guard _proc != 0 else {
            return false
        }

        let consts = Consts.shared
        let our_task_addr = rk64(_proc + offsets.proc.task)


        let our_flags = rk32(our_task_addr + offsets.task.flags)
        wk32(our_task_addr + offsets.task.flags, our_flags | consts.TF_PLATFORM)

        var our_csflags = rk32(_proc + offsets.proc.csflags)
        our_csflags = our_csflags | consts.CS_PLATFORM_BINARY | consts.CS_INSTALLER | consts.CS_GET_TASK_ALLOW
        our_csflags &= ~(consts.CS_RESTRICT | consts.CS_HARD | consts.CS_KILL)
        wk32(_proc + offsets.proc.csflags, our_csflags)
        
        var ks = kill(pid, SIGCONT)
        
        print("[jailbreakd] spawn and run:", ks)

        return true
    }
    
    private func spawnJailbreakd(genCountAddr: UInt64) -> Bool {
        let dict = xpc_dictionary_create(nil, nil, 0)
        let request = xpc_dictionary_create(nil, nil, 0)
        let submitJob = xpc_dictionary_create(nil, nil, 0)
        let environmentVariables = xpc_dictionary_create(nil, nil, 0)
        let machServices = xpc_dictionary_create(nil, nil, 0)
        
        let allProcStr = String(format: "0x%llx", all_proc)
        let genCountAddrStr = String(format: "0x%llx", genCountAddr)
        xpc_dictionary_set_string(environmentVariables, "allProc", allProcStr.cString(using: .utf8)!)
        xpc_dictionary_set_string(environmentVariables, "genCountAddr", genCountAddrStr.cString(using: .utf8)!)
        
        let machService = xpc_dictionary_create(nil, nil, 0)
        xpc_dictionary_set_int64(machService, "HostSpecialPort", 15)
        
        xpc_dictionary_set_value(machServices, "org.coolstar.jailbreakd", machService)
        
        xpc_dictionary_set_bool(submitJob, "KeepAlive", true)
        xpc_dictionary_set_bool(submitJob, "RunAtLoad", true)
        xpc_dictionary_set_string(submitJob, "UserName", "root")
        xpc_dictionary_set_string(submitJob, "Program", "/private/var/containers/Bundle/odyssey/jailbreakd")
        xpc_dictionary_set_string(submitJob, "Label", "jailbreakd")
        xpc_dictionary_set_string(submitJob, "POSIXSpawnType", "Interactive")
        xpc_dictionary_set_value(submitJob, "EnvironmentVariables", environmentVariables)
        xpc_dictionary_set_value(submitJob, "MachServices", machServices)
        
        xpc_dictionary_set_value(request, "SubmitJob", submitJob)
        xpc_dictionary_set_value(dict, "request", request)
        
        xpc_dictionary_set_uint64(dict, "subsystem", 7)
        xpc_dictionary_set_uint64(dict, "type", 7)
        xpc_dictionary_set_uint64(dict, "handle", 0)
        xpc_dictionary_set_uint64(dict, "routine", UInt64(ROUTINE_SUBMIT))
        
        var outDict: xpc_object_t?
        let rc = xpc_pipe_routine(xpc_bootstrap_pipe(), dict, &outDict)
        if rc == 0,
            let outDict = outDict {
            let rc2 = Int32(xpc_dictionary_get_int64(outDict, "error"))
            if rc2 != 0 {
                print(String(format: "Error submitting service: %s", xpc_strerror(rc2)))
                return false
            }
        } else if rc != 0 {
            print(String(format: "Error submitting service (no outdict): %s", xpc_strerror(rc)))
            return false
        }
        return true
    }
    #endif
}
